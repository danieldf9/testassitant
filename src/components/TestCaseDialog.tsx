
"use client";

import type { JiraIssue } from '@/app/actions';
import { generateTestCasesAction, attachTestCasesToJiraAction } from '@/app/actions';
import type { GenerateTestCasesOutput } from '@/ai/flows/generate-test-cases';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { ScrollArea } from '@/components/ui/scroll-area';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, AlertCircle, CheckCircle, Wand2, FileText, ListChecks } from 'lucide-react';
import React, { useState, useEffect } from 'react';

interface TestCaseDialogProps {
  issue: JiraIssue | null;
  isOpen: boolean;
  onClose: () => void;
}

type AttachmentType = 'csv' | 'subtask';

export function TestCaseDialog({ issue, isOpen, onClose }: TestCaseDialogProps) {
  const { credentials } = useAuth();
  const { toast } = useToast();
  const [generatedTestCases, setGeneratedTestCases] = useState<GenerateTestCasesOutput>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [attachmentType, setAttachmentType] = useState<AttachmentType>('subtask');
  const [isAttaching, setIsAttaching] = useState(false);

  useEffect(() => {
    if (isOpen && issue) {
      setGeneratedTestCases([]);
      setError(null);
      setIsLoading(true);

      generateTestCasesAction({
        description: issue.description || '',
        acceptanceCriteria: issue.acceptanceCriteria || '',
      })
        .then((data) => {
          setGeneratedTestCases(data);
          if (data.length === 0) {
            toast({
              title: "No Test Cases Generated",
              description: "The AI couldn't generate test cases. Try adding more detail to the issue description or acceptance criteria.",
              variant: "default",
            });
          }
        })
        .catch((err) => {
          console.error(err);
          setError(err.message || 'Failed to generate test cases.');
          toast({
            title: 'Error Generating Test Cases',
            description: err.message || 'An unexpected error occurred.',
            variant: 'destructive',
          });
        })
        .finally(() => setIsLoading(false));
    }
  }, [isOpen, issue, toast]);

  const handleAttachToJira = async () => {
    if (!credentials || !issue || generatedTestCases.length === 0) return;

    setIsAttaching(true);
    setError(null);
    try {
      const result = await attachTestCasesToJiraAction(credentials, {
        issueKey: issue.key,
        testCases: generatedTestCases, 
        attachmentType,
        projectId: issue.project.id,
      });

      toast({
        title: result.success ? 'Success' : 'Error',
        description: result.message,
        variant: result.success ? 'default' : 'destructive',
        className: result.success ? "bg-green-100 border-green-300 text-green-800 dark:bg-green-900 dark:border-green-700 dark:text-green-200" : "",
        duration: 10000,
      });
      if (result.success) { 
        onClose(); 
      }
    } catch (err: any) {
      console.error(err);
      setError(err.message || 'Failed to attach test cases to Jira.');
      toast({
        title: 'Error Attaching Test Cases',
        description: err.message || 'An unexpected error occurred.',
        variant: 'destructive',
      });
    } finally {
      setIsAttaching(false);
    }
  };
  
  const handleDialogClose = () => {
    setGeneratedTestCases([]);
    setError(null);
    setIsLoading(false);
    setIsAttaching(false);
    onClose();
  };


  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && handleDialogClose()}>
      <DialogContent className="max-w-4xl h-[90vh] flex flex-col p-0">
        <DialogHeader className="p-6 pb-4 border-b">
          <DialogTitle className="text-2xl">Generated Test Cases for {issue?.key}</DialogTitle>
          <DialogDescription>
            Review the test cases generated by AI for &quot;{issue?.summary}&quot;. You can then attach them to Jira.
          </DialogDescription>
        </DialogHeader>

        <div className="flex-grow overflow-hidden px-6 py-4">
          {isLoading && (
            <div className="flex flex-col items-center justify-center h-full">
              <Loader2 className="h-16 w-16 animate-spin text-primary mb-4" />
              <p className="text-lg text-muted-foreground">AI is crafting test cases...</p>
              <p className="text-sm text-muted-foreground">This might take a moment.</p>
            </div>
          )}
          {!isLoading && error && (
            <Alert variant="destructive" className="my-4">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {!isLoading && !error && generatedTestCases.length === 0 && (
             <Alert className="my-4">
              <Wand2 className="h-4 w-4" />
              <AlertTitle>No Test Cases Generated</AlertTitle>
              <AlertDescription>
                The AI could not generate any test cases based on the provided issue details. 
                Please ensure the Jira issue has a clear description and/or acceptance criteria.
              </AlertDescription>
            </Alert>
          )}
          {!isLoading && !error && generatedTestCases.length > 0 && (
            <ScrollArea className="h-full pr-4">
              <Table>
                <TableHeader className="sticky top-0 bg-background shadow-sm">
                  <TableRow>
                    <TableHead className="w-[120px]">ID</TableHead>
                    <TableHead>Name</TableHead>
                    <TableHead>Precondition</TableHead>
                    <TableHead>Steps</TableHead>
                    <TableHead>Expected Result</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {generatedTestCases.map((tc, index) => (
                    <TableRow key={tc.testCaseId || index}>
                      <TableCell className="font-medium align-top">{tc.testCaseId}</TableCell>
                      <TableCell className="align-top">{tc.testCaseName}</TableCell>
                      <TableCell className="align-top">{tc.precondition}</TableCell>
                      <TableCell className="align-top">
                        <ul className="list-decimal list-inside text-xs space-y-1">
                          {tc.testSteps.map((step, i) => <li key={i}>{step}</li>)}
                        </ul>
                      </TableCell>
                      <TableCell className="align-top">{tc.expectedResult}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </ScrollArea>
          )}
        </div>

        {!isLoading && !error && generatedTestCases.length > 0 && (
          <DialogFooter className="p-6 border-t bg-background">
            <div className="flex flex-col sm:flex-row items-center justify-between w-full gap-4">
              <div className="flex-grow">
                <Label className="text-sm font-medium mb-2 block">Attachment Type:</Label>
                <RadioGroup
                  defaultValue="subtask"
                  value={attachmentType}
                  onValueChange={(value: AttachmentType) => setAttachmentType(value)}
                  className="flex items-center space-x-4"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="subtask" id="subtask" />
                    <Label htmlFor="subtask" className="flex items-center gap-1"><ListChecks className="h-4 w-4 text-muted-foreground"/> Sub-tasks</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="csv" id="csv" />
                    <Label htmlFor="csv" className="flex items-center gap-1"><FileText className="h-4 w-4 text-muted-foreground"/> CSV File</Label>
                  </div>
                </RadioGroup>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" onClick={handleDialogClose} disabled={isAttaching}>
                  Cancel
                </Button>
                <Button onClick={handleAttachToJira} disabled={isAttaching || generatedTestCases.length === 0}>
                  {isAttaching ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <CheckCircle className="mr-2 h-4 w-4" />
                  )}
                  {isAttaching ? 'Attaching...' : 'Attach to Jira'}
                </Button>
              </div>
            </div>
          </DialogFooter>
        )}
         {(!isLoading && (error || generatedTestCases.length === 0)) && (
            <DialogFooter className="p-6 border-t">
                 <Button variant="outline" onClick={handleDialogClose}>
                  Close
                </Button>
            </DialogFooter>
         )}
      </DialogContent>
    </Dialog>
  );
}
